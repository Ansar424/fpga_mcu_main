/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* XILINX CONSORTIUM BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include "platform.h"
#include <stdio.h>
#include "xparameters.h"
#include "xil_cache.h"
#include "xgpio.h"
#include "xintc.h"
#include "xtmrctr.h"
#include "xgpio.h"
#include "xiic.h"
#include "xiic_l.h"

void print(char *str);

#define LED_CHANNEL 1
#define LSM_ADR		0x1D
//#define LSM_ADR		0x6B

XIic Iic; /* The driver instance for IIC Device */
XGpio GpioOutput;

int main()
{
	//init_platform();

	XGpio_SetDataDirection(&GpioOutput, LED_CHANNEL, 0x0);

	XGpio_DiscreteWrite(&GpioOutput, LED_CHANNEL, 0x8);

   print("---Entering main---\n\r");




      int status;
      int del;
      XIic_Config *ConfigPtr;

      u8 lsm_whoami = 0x0F;
      u8 lsm_xm_start = 0xA8;
      u8 lsm_xm_ctrl[2];
      u8 bar_ones = 0xFF;
      u8 bar_reset = 0x1E;
      u8 bar_prom = 0xA6;
      u8 bar_conv_d1 = 0x48;
      u8 bar_adc_read = 0x00;

      u8 bar_ret[6];

      int bar_val;


      print("\r\n Starting I2C\r\n");



      lsm_xm_ctrl[0] = 0x20;
      lsm_xm_ctrl[1] = 0x47;

      bar_ret[0] = 0xFF;
      bar_ret[1] = 0xFF;
      bar_ret[2] = 0xFF;
      bar_ret[3] = 0xFF;
      bar_ret[4] = 0xFF;
      bar_ret[5] = 0xFF;


      ConfigPtr = XIic_LookupConfig(XPAR_AXI_IIC_0_DEVICE_ID);
      status = XIic_CfgInitialize(&Iic, ConfigPtr, ConfigPtr->BaseAddress);
	  if (status != XST_SUCCESS) {
		  print("Init failed \r\n");
	  }

      XIic_Reset(&Iic);

      status = XIic_SetAddress(&Iic, XII_ADDR_TO_SEND_TYPE, LSM_ADR);
	  if (status != XST_SUCCESS) {
		  print("Set address failed \r\n");
	  }

      status = XIic_Start (&Iic);
	  if (status != XST_SUCCESS) {
		  print("IIC start failed \r\n");
	  }


      print("\r\n Transferring data on I2C\r\n");
      XGpio_DiscreteWrite(&GpioOutput, LED_CHANNEL, 0x8|0x1);
      status = XIic_Send(XPAR_AXI_IIC_0_BASEADDR, LSM_ADR, &lsm_whoami, 1, XIIC_STOP);
	  status = XIic_Recv(XPAR_AXI_IIC_0_BASEADDR, LSM_ADR, &bar_ret[0], 1, XIIC_STOP);

	  status = XIic_Send(XPAR_AXI_IIC_0_BASEADDR, LSM_ADR, lsm_xm_ctrl, 2, XIIC_STOP);


	  while (1==1) {
		  status = XIic_Send(XPAR_AXI_IIC_0_BASEADDR, LSM_ADR, &lsm_xm_start, 1, XIIC_STOP);
		  status = XIic_Recv(XPAR_AXI_IIC_0_BASEADDR, LSM_ADR, &bar_ret[0], 6, XIIC_STOP);



	  }


      status = XIic_Stop (&Iic);
	  if (status != XST_SUCCESS) {
		  print("IIC stop failed \r\n");
	  }

	  print("---Who am I--\n\r");



   print("---Exiting main---\n\r");

   //cleanup_platform();
   return 0;
}
